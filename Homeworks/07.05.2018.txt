package homeworks.test_zadanie;

/**
 * Создать имитацию коллекции(с помощью массива) ArrayList для работы с типом int.
 * Создать класс с полем типа массив.
 * Класс должен выполнять следующие операции:
 * 1) добавление элементов.
 * 2) изменение/удаление элементов по индексу.
 * 3) увеличение листа на заданное количество элементов.
 * 4) уменьшение листа до заданного количество элементов.
 * 5) вывод элементов в консоль в прямом и обратном порядке.
 * 6) сортировка листа методом пузырька(http://study-java.ru/uroki-java/urok-11-sortirovka-massiva/).
 * 7) добавление массива в массив.
 * 8) удалять дубликаты.
 * 9) Поиск элемента методом линейного поиска.
 * При удалении элемента не обнулять его, а удалять физически.
 * Начальную размерность листа юзер вводит с консоли.
 * Создать меню для работы с листом из консоли.
 * Условие добавления: перезаписывать если элемент равен 0;
 * Все действия юзера записывать в файл с название Logs.txt в формате дата + название метода + входящие параметры.
 * По запросу юзера выводить в консоль данные файла Logs.txt.
 * При работе с файлами использовать класс Files. В задаче не использовать методы класса Arrays и коллекции.
 * Создать меню.
 */
public class IntArrayList {

    private int[] array;

    public IntArrayList() {

        array = new int[10];//0
    }

    public static void main(String[] args) {


        int [] test = {112,22,33};
        int [] test2= new int[test.length+1];
        int m=5;int mz=0;
        for ( int test3: test)
        {
            test2[mz]=test3; mz++;
        }
        test2[mz++]=m;
        test=test2;

        for ( int test3: test)

        {
            System.out.println(test3);
        }
    }
//        int[] myArray = new int[27];
//
//        int length = myArray.length;
//
//        for (int i = 0; i < length; i++) {
//            myArray[i] = i;
//
//            System.out.println("The last element of the array " + myArray[i]);
//        }
//
//        System.out.println(length);
//    }

    //1 - Adding an item to the list
    public void addElement(int element) {
        for (int i = 0; i < array.length; i++) {
            if (array[i] == 0) {
                array[i] = element;
                break;
            }
            System.out.println();
        }
    }

    //2 - create method for resizing array
    public void removeElementByIndex(int index, int newElement) {
        array[index] = newElement;
    }

    //3 - Delete items by index
    public void deleteElementIndex(int index, int newElement) {
        array[index] = newElement;
        if (index >= 0 && index < array.length) {
            int[] copy = new int[array.length - 1];
            System.out.println();
        }
        return;
    }

    //4 - Increase the sheet by a specified number of elements
    public void increaseElement() {

    }

    //5 - Reducing the sheet to a specified number of elements
    public void decreasingElement() {

    }

    //6 - Output elements to the console in the forward and reverse order
    public void forwardReverseOrder() {

    }

    //7 - Sorting sheet by bubble method
    public void blisterSort() {

    }

    //8 - Adding an Array to an Array
    public void addArrayToArray() {

    }

    //9 - Delete duplicates
    public void deleteDuplicat() {

    }

    //10 - Searching for an element using the linear search method
    public void searchLinear() {

    }

}


  //1 - Add an item to the list
        int[] newarray = IntArrayList.addElementToEnd(arraylist, 77);
        System.out.println("Add an item to the list");
        IntArrayList.toString(newarray);


        //2 - create method for resizing array
        int[] removearray = IntArrayList.removeElementByIndex(arraylist, 5, 4);
        System.out.println(" 2 - create method for resizing array");
        IntArrayList.toString(removearray);


        //3 - Delete items by index
        int[] arraydelete = IntArrayList.deleteElementIndex(arraylist, 9);
        System.out.println(" 3 - Delete items by index");
        IntArrayList.toString(arraydelete);


        //4 - Increase the sheet by a specified number of elements
        int[] addempty = IntArrayList.addEmptyElement(arraylist,5);
        System.out.println(" 4 - Increase the sheet by a specified number of elements");
        IntArrayList.toString(addempty);


        //5 - Reducing the sheet to a specified number of elements
        int[] deleteempty = IntArrayList.deleteEmptyElement(arraylist,2);
        System.out.println(" 5 - Reducing the sheet to a specified number of elements");
        IntArrayList.toString(deleteempty);


        //6 - Output elements to the console in the forward and reverse order
        int[] forward = IntArrayList.forwardReverseOrder(arraylist);
        System.out.println(" 6 - Output elements to the console in the forward and reverse order");
        IntArrayList.toString(forward);


        //7 - Output of elements to the console in the opposite direction
        int[] reverse = IntArrayList.reverseOrder(arraylist);
        System.out.println(" 7 - Output of elements to the console in the opposite direction");
        IntArrayList.toString(reverse);


        //8 - Sorting sheet by bubble method
        int[] blister = IntArrayList.blisterSort(arraylist);
        System.out.println(" 8 - Sorting sheet by bubble method");
        IntArrayList.toString(blister);


        //10 - Delete duplicates
        int[] dublicat = IntArrayList.deleteDublicat(arraylist, 5);
        System.out.println(" 10 - Delete duplicates");
        IntArrayList.toString(dublicat);


        //11 - Searching for an element using the linear search method
        int[] search = IntArrayList.searchLinear(arraylist, 2);
        System.out.println(" 11 - Searching for an element using the linear search method");
        IntArrayList.toString(search);

