java.util.Date - Самый древний способ

Класс java.util.Calendar является абстрактным классом. Единственная реализация — java.util.GregorianCalendar. Новый
экземпляр создаётся фабричным методом:

Calendar rightNow = Calendar.getInstance();

Calendar предоставляет методы установки значений различных полей вроде YEAR, MONTH, DAY_OF_MONTH, HOUR и т. д,
манипуляции этими полями, например добавление дня или месяца. Дата и время представляется количеством миллисекунд,
прошедших с 1 января 1970 года 00:00:00.000 GMT. Обычно класс java.util.Calendar используется для создания экземпляров
java.util.Date, представляющих необходимую дату и время.

Calendar имеет два режима интерпретации полей: мягкий (lenient) и жёсткий (non-lenient). Когда Calendar в мягком
(lenient) режиме, то он принимает больший диапазон значений полей, чем возвращает. Когда Calendar пересчитывает значения
полей, возвращаемых get(), то все поля нормализуются. Например, мягкий GregorianCalendar интерпретирует MONTH == JANUARY,
DAY_OF_MONTH == 32 как 1 февраля.

Когда Calendar в жёстком (non-lenient) режиме, то он бросает исключение в подобных случаях. Например, GregorianCalendar
всегда возвращает значение поля DAY_OF_MONTH в диапазоне от 1 до длины месяца. Жёсткий GregorianCalendar бросает
исключение во время выполнения вычислений своего времени или поля, если хоть одно поле выходит за допустимые границы.

java.time
Наиболее удобный и современный способ работы с датой и временем. Берёт своё начало от библиотеки Joda-Time.

Есть два базовых способа представления времени. Один способ представляет время в терминах человека, таких как год, месяц,
день, час, минуты и секунды. Второй способ представляет машинное время, измеряя время непрерывно с начала, называемого
эпохой, в наносекундах. Пакет Date-Time содержит большое количество классов, представляющий дату и время. Некоторые
классы в Date-Time API представляют машинное время, некоторые человеческое.

Например, вы можете выбрать java.time.LocalDate для хранения даты рождения, так как многие люди празднуют день рождения
в тот же день, независимо от того, находятся ли они в месте рождения или на другом конце Земли. Если вам нужно
астрологическое время, то вы можете использовать java.time.LocalDateTime, чтобы показать дату и день рождения, либо
java.time.ZonedDateTime, который дополнительно содержит часовой пояс. Если вы создаёте временную отметку, то вероятнее
всего вы захотите использовать java.time.Instant, который позволяет сравнивать одну временную отметку с другой.

java.time.LocalTime
Класс java.time.LocalTime оперирует только временем. Он полезен  для хранения времени открытия/закрытия магазина и т. д.
 Пример:

LocalTime thisSec;

for (;;) {
    thisSec = LocalTime.now();

    // Предположим, что метод display уже есть
    display(thisSec.getHour(), thisSec.getMinute(), thisSec.getSecond());
}

LocalTime thisSec;

for (;;) {
    thisSec = LocalTime.now();

    // Предположим, что метод display уже есть
    display(thisSec.getHour(), thisSec.getMinute(), thisSec.getSecond());
}
Класс LocalTime  не сохраняет информацию о часовой поясе и летнем/зимнем времени.